import os, sys, commands

platform_libs = ['pthread', 'rt']

env = Environment(ENV=os.environ)

mode = ARGUMENTS.get('mode', 'release')
if mode == 'debug':
    env.Append(CXXFLAGS = ['-O0'])
elif mode == 'release':
    env.Append(CXXFLAGS = ['-O2', '-DNDEBUG'])
else:
    print('Argument mode fatal,only support debug or release.')
    exit()

common_CXXFLAGS = ['-g', '-pthread', '-std=c++14', '-pipe', '-fPIC']
env.Append(TOOLSET   = ['g++'])
env.Append(CXXFLAGS  = common_CXXFLAGS)
env.Append(CXXFLAGS  = ['-Wall', '-Wextra', '-Werror', '-Wunused-parameter', '-Woverloaded-virtual', '-Wpointer-arith', '-Wshadow', '-Wwrite-strings', '-Wcast-align'])
env.Append(CXXFLAGS  = ['-Wconversion',  '-Wold-style-cast'])
env.Append(LINKFLAGS = ['-pthread', '-static-libstdc++'])
env.Append(CPPPATH   = [])

non_warn_env = env.Clone(CXXFLAGS = common_CXXFLAGS)

# ubuntu boost,zlib,hiredis,curl
third_include_path     = '/usr/include'
jsoncpp_include_path = '/usr/include/jsoncpp'

# ubuntu boost,zlib,hiredis,curl,jsoncpp
third_lib_path = '/usr/lib/x86_64-linux-gnu'

Export('env')
Export('non_warn_env')
Export('third_include_path')
Export('jsoncpp_include_path')
Export('third_lib_path')
Export('platform_libs')

SConscript('../../src/base/SConscript', variant_dir='output/base', duplicate=0)
SConscript('../../src/base_test/SConscript', variant_dir='output/base_test', duplicate=0)

